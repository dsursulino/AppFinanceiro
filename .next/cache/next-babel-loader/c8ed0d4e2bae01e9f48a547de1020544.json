{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n// import all interfaces\nimport { BaseRepository } from './base/baseRepository'; // that class only can be extended\n\nexport var FichaREP = /*#__PURE__*/function (_BaseRepository) {\n  _inherits(FichaREP, _BaseRepository);\n\n  var _super = _createSuper(FichaREP);\n\n  function FichaREP(dbClient) {\n    _classCallCheck(this, FichaREP);\n\n    return _super.call(this);\n  }\n\n  _createClass(FichaREP, [{\n    key: \"create\",\n    value: function create(item) {\n      return this.dbClient.ficha.create({\n        data: item\n      });\n    }\n  }, {\n    key: \"update\",\n    value: function update(item) {\n      return this.dbClient.ficha.update({\n        where: {\n          id: item.id\n        },\n        data: item\n      });\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(id) {\n      throw new Error('Method not implemented.');\n    }\n  }, {\n    key: \"find\",\n    value: function find(item) {\n      throw new Error('Method not implemented.');\n    }\n  }, {\n    key: \"findOne\",\n    value: function findOne(id) {\n      throw new Error('Method not implemented.');\n    }\n  }]);\n\n  return FichaREP;\n}(BaseRepository);","map":{"version":3,"sources":["D:/Projetos/TMB/front/solicitacao_credito/src/repositories/fichaREP.ts"],"names":["BaseRepository","FichaREP","dbClient","item","ficha","create","data","update","where","id","Error"],"mappings":";;;;;;;;;;AAAA;AAIA,SAASA,cAAT,QAA+B,uBAA/B,C,CACA;;AACA,WAAcC,QAAd;AAAA;;AAAA;;AAEE,oBAAYC,QAAZ,EAAoC;AAAA;;AAAA;AAEnC;;AAJH;AAAA;AAAA,2BAMSC,IANT,EAMoC;AAChC,aAAO,KAAKD,QAAL,CAAcE,KAAd,CAAoBC,MAApB,CAA2B;AAChCC,QAAAA,IAAI,EAAEH;AAD0B,OAA3B,CAAP;AAGD;AAVH;AAAA;AAAA,2BAWUA,IAXV,EAWqC;AACjC,aAAO,KAAKD,QAAL,CAAcE,KAAd,CAAoBG,MAApB,CAA2B;AAChCC,QAAAA,KAAK,EAAE;AAAEC,UAAAA,EAAE,EAAEN,IAAI,CAACM;AAAX,SADyB;AAEhCH,QAAAA,IAAI,EAAEH;AAF0B,OAA3B,CAAP;AAID;AAhBH;AAAA;AAAA,4BAiBSM,EAjBT,EAiBuC;AACnC,YAAM,IAAIC,KAAJ,CAAU,yBAAV,CAAN;AACD;AAnBH;AAAA;AAAA,yBAoBOP,IApBP,EAoBsC;AAClC,YAAM,IAAIO,KAAJ,CAAU,yBAAV,CAAN;AACD;AAtBH;AAAA;AAAA,4BAuBUD,EAvBV,EAuBsC;AAClC,YAAM,IAAIC,KAAJ,CAAU,yBAAV,CAAN;AACD;AAzBH;;AAAA;AAAA,EAA+BV,cAA/B","sourcesContent":["// import all interfaces\nimport { IWrite } from './interfaces/IWrite';\nimport { IRead } from './interfaces/IRead';\nimport { Ficha, PrismaClient } from '@prisma/client';\nimport { BaseRepository } from './base/baseRepository';\n// that class only can be extended\nexport  class FichaREP extends BaseRepository implements IWrite<Ficha>, IRead<Ficha> {\n\n  constructor(dbClient: PrismaClient) {\n    super();\n  }\n\n  create(item: Ficha): Promise<any> {\n    return this.dbClient.ficha.create({\n      data: item\n    });\n  }\n  update( item: Ficha): Promise<any> {\n    return this.dbClient.ficha.update({\n      where: { id: item.id },\n      data: item\n    });\n  }\n  delete(id: string): Promise<boolean> {\n    throw new Error('Method not implemented.');\n  }\n  find(item: Ficha): Promise<Ficha[]> {\n    throw new Error('Method not implemented.');\n  }\n  findOne(id: string): Promise<Ficha> {\n    throw new Error('Method not implemented.');\n  }\n\n}"]},"metadata":{},"sourceType":"module"}